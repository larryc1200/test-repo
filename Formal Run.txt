#Click on File->Export Notebook as->Export Notebook to Executable Script and save it as .py file

# Add mlflow import
from mlflow import log_metric
 
# Add directory for output model
MODEL_DIR = "/model/"

# Add mlflow metric calls
class loggingCallback(keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs=None):
        accuracy_metric = "accuracy"
        if "acc" in logs:
            accuracy_metric = "acc"

        log_metric ("train_loss", logs["loss"], step=epoch)
        log_metric ("train_accuracy", logs[accuracy_metric], step=epoch)
        log_metric ("val_loss", logs["val_loss"], step=epoch)
        log_metric ("val_accuracy", logs["val_" + accuracy_metric], step=epoch)
        # output accuracy metric for katib to collect from stdout
        print(f"accuracy={logs['val_' + accuracy_metric]}")

# Replace training command for formal training
model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=0, validation_split=0.1, 
        callbacks=[loggingCallback(), tf.keras.callbacks.TensorBoard(log_dir=MODEL_DIR)])

# Add code to write saved model after training
tf.keras.backend.set_learning_phase(0)  # Ignore dropout at inference
tf.saved_model.save(model,MODEL_DIR + str(1))